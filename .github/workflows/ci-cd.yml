name: CI/CD

on:
  push:
    branches:
      - 'main*'
      - 'devel-*'
    tags:
      - '*'
  pull_request:
  schedule:
    - cron: '10 9 * * *'
  workflow_dispatch:
permissions: {}

jobs:
  dependencies:
    name: Test python/requirements.txt
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Check requirements.txt
        run: |
          (diff -w <(grep -v -e "python_version >  '3.7'" -e "python_version == '3.8'" -e "python_version >  '3.8'" python/requirements.txt | sed -e "s/;.*//") python/requirements-3.7.txt || true) | (! grep -e "^<")
          (diff -w <(grep -v -e "python_version <= '3.7'" -e "python_version >  '3.8'" python/requirements.txt | sed -e "s/;.*//") python/requirements-3.8.txt || true) | (! grep -e "^<")
          (diff -w <(grep -v -e "python_version <= '3.7'" -e "python_version == '3.8'" python/requirements.txt | sed -e "s/;.*//") python/requirements-post-3.8.txt || true) | (! grep -e "^<")
        shell: bash
      - name: Check for dependency updates
        continue-on-error: true
        run: |
          pip install tox
          tox
          git diff --exit-code
        shell: bash

  test-mac:
    name: "Test macOS"
    uses: "./.github/workflows/test-os.yml"
    with:
      os: '["macos-13", "macos-14", "macos-15"]'
      python-version: '["3.10", "3.11", "3.12", "3.13", "installed"]'
      include: >
        [
          {"os": "macos-13", "python-version": "3.8"},
          {"os": "macos-13", "python-version": "3.9"},
        ]

  test-lnx:
    name: "Test Ubuntu"
    uses: "./.github/workflows/test-os.yml"
    with:
      os: '["ubuntu-22.04", "ubuntu-24.04"]'
      python-version: '["3.9", "3.10", "3.11", "3.12", "3.13", "installed"]'
      include: >
        [
          {"os": "ubuntu-22.04", "python-version": "3.8"},
        ]

  test-win:
    name: "Test Windows"
    uses: "./.github/workflows/test-os.yml"
    with:
      os: '["windows-2019", "windows-2022", "windows-2025"]'
      python-version: '["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]'
      include: '[{"os": "windows-2022", "python-version": "installed"}]'

  publish:
    name: "Publish"
    needs: [test-mac, test-lnx, test-win]
    # we run the action from this branch whenever we can (when it runs in our repo's context)
    if: >
      ! cancelled() &&
      github.event.sender.login != 'dependabot[bot]' &&
      ( github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository )
    uses: "./.github/workflows/publish.yml"
    permissions:
      checks: write
      pull-requests: write
      security-events: write
      contents: read

  config-deploy:
    name: Configure Deployment
    needs: [test-mac, test-lnx, test-win]
    # do not build or deploy on forked repositories
    if: github.repository_owner == 'step-security'
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.action.outputs.image }}
      image-exists: ${{ steps.image.outputs.exists }}
      image-version: ${{ steps.action.outputs.version }}

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Extract action image and version
        # we deploy from a specific commit on master (the one that mentions a new version the first time)
        # so we need to tell docker/metadata-action to extract docker tags from that version
        id: action
        run: |
          image=$(grep -A 10 "^runs:" action.yml | grep -E "^\s+image:\s" | sed -E -e "s/^\s+image:\s*'//" -e "s/docker:\/\///" -e "s/'\s*$//")
          version=$(cut -d : -f 2 <<< "$image")
          echo "image=$image" >>$GITHUB_OUTPUT
          echo "version=$version" >>$GITHUB_OUTPUT
        shell: bash

      - name: Check action image existence
        id: image
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          if docker manifest inspect '${{ steps.action.outputs.image }}'
          then
            echo "exists=true" >>$GITHUB_OUTPUT
          fi
        shell: bash

  deploy:
    name: Deploy to GitHub
    needs: [publish, config-deploy]

    # do not build or deploy on forked repositories
    if: github.repository_owner == 'step-security'
    runs-on: ubuntu-latest
    permissions:
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      should_push: ${{ steps.check_conditions.outputs.should_push }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Docker meta
        id: docker-meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ghcr.io/step-security/publish-unit-test-result-action
          flavor: |
            latest=false
            prefix=v
          tags: |
            type=sha
            type=ref,event=tag
            type=semver,pattern={{major}},value=${{ needs.config-deploy.outputs.image-version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.config-deploy.outputs.image-version }}
            type=semver,pattern={{version}},value=${{ needs.config-deploy.outputs.image-version }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Conditions
        id: check_conditions
        run: |
          should_push_value='false'
          if [[ '${{ github.event_name }}' == 'push' ]]; then
            if [[ ${{ startsWith(github.ref, 'refs/heads/main') }} && '${{ needs.config-deploy.outputs.image-exists }}' != 'true' ]]; then
              should_push_value='true'
            fi
          fi
          echo "should_push=$should_push_value" >> "$GITHUB_OUTPUT"


      - name: Build and push Docker image
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        id: build
        with:
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          pull: true
          # deploy image actions from commits pushed to main and
          # deploy Dockerfile actions from pushed version tags (no major versions)
          push: ${{ steps.check_conditions.outputs.should_push }}
      - name: Output image
        id: image
        env:
          IMAGE_REGISTRY: ghcr.io
          IMAGE_NAME: ${{ github.repository }}
        run: |
          # NOTE: Set the image as an output because the `env` context is not
          # available to the inputs of a reusable workflow call.
          image_name="${IMAGE_REGISTRY}/${IMAGE_NAME}"
          echo "image=$image_name" >> "$GITHUB_OUTPUT"
  
  provenance:
    needs: [deploy]
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading attestations.
    if: ${{ needs.deploy.outputs.should_push == 'true' }}
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: ${{ needs.deploy.outputs.image }}
      digest: ${{ needs.deploy.outputs.digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}        

  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@4d991eb9b905ef189e4c376166672c3f2f230481 # v2.11.0
        with:
          egress-policy: audit

      - name: Upload
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: Event File
          path: ${{ github.event_path }}
